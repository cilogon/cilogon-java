# Do a complete build of everything including the tools. This is a stupid script
# (meaning it will simply exit if there is any detected issue at all) and
# should only be run if you are sure it will complete!!
#


# Note that this does not build the website in oa4mp-website since you need to run it
# with version 2.2+ of maven. Do so manually.


# Set release to
# 0 to build from the head
# 1 to build the release.
# 2 to build the release AND deploy to Sonatype.
# Make sure that the correct versions
# of everything are set since this will try to run everything from the tagged release.
#
############################
# For a Sonatype Release (=2)
# * Be sure to edit edu.uiuc.ncsa.dev/ncsa-security-dev/ncsa-security-instances/cilogon2-demo to get the right versions
# * enable gpg in the following poms ncsa-security-all, myproxy Look and-oa4mp. website for the gpg-plugin.
#
# To deploy to Sonatype requires you have the private GPG key and password or register one.
# Do not do this until you are completely ready to close the release process and understand
# how Sonatype works.
# When you are done, you will also need to copy client and server wars with their /.asc files
# to  $ROOT/latest to get all the right versions that are linked to on the website.
# This script, by default, copies everything to a temp directory (in $DEPLOY_ROOT)
# so you can make sure it is right before putting it in the latest.
############################

##############################
# Set the RELEASE value here #
##############################

RELEASE=0

############################################
#  The next two values are only need to be #
#  set if the RELEASE is NOT 0.            #
#  Otherwise they are ignored.             #
############################################

OA4MP_VERSION=1.2
CILOGON_VERSION=2.4

#############################################
# Locations of the source and target.       #
# SVN_ROOT is the very top of the SVN       #
# checkout. The assumption is that sub-     #
# directories named "trunk" hold the trunk  #
# and "tags" hold the tagged release.       #
# This script will build all of the paths   #
# it needs from these.                      #
#############################################

SVN_ROOT=/home/ncsa/dev/sf_7_1_2013

#############################################
# DEPLOY_ROOT is the location where the     #
# binaries will be placed.                  #
#############################################

DEPLOY_ROOT=/home/ncsa/dev/temp-deploy

#################################
# End of user serviceable parts #
#################################

if [ $RELEASE == 0 ]; then
      ROOT=$SVN_ROOT/trunk
      MAVEN_TARGET="install"
      NCSA_ROOT=$ROOT/edu.uiuc.ncsa/ncsa-security-all
      OA4MP_ROOT=$ROOT/edu.uiuc.ncsa/myproxy
      CILOGON_ROOT=$ROOT/org.cilogon/cilogon2
      TWOFACTOR_ROOT=$ROOT/edu.uiuc.ncsa/myproxy/oa4mp-twofactor
fi
if [ $RELEASE == 1 ]; then
      ROOT=$SVN_ROOT/tags
      MAVEN_TARGET="install"
      NCSA_ROOT=$ROOT/edu.uiuc.ncsa/ncsa-security-all-$OA4MP_VERSION
      OA4MP_ROOT=$ROOT/edu.uiuc.ncsa/myproxy-$OA4MP_VERSION
      CILOGON_ROOT=$ROOT/org.cilogon/cilogon2-$CILOGON_VERSION
      TWOFACTOR_ROOT=$ROOT/edu.uiuc.ncsa/myproxy-$OA4MP_VERSION/oa4mp-twofactor
fi

if [ $RELEASE == 2 ]; then
      ROOT=$SVN_ROOT/tags
      MAVEN_TARGET="install deploy"
      NCSA_ROOT=$ROOT/edu.uiuc.ncsa/ncsa-security-all-$OA4MP_VERSION
      OA4MP_ROOT=$ROOT/edu.uiuc.ncsa/myproxy-$OA4MP_VERSION
      CILOGON_ROOT=$ROOT/org.cilogon/cilogon2-$CILOGON_VERSION
      TWOFACTOR_ROOT=$ROOT/edu.uiuc.ncsa/myproxy-$OA4MP_VERSION/oa4mp-twofactor
fi


# Now check that target directories and roots exist.

if [ ! -d "$NCSA_ROOT" ]; then
  echo "Error: NCSA root directory $NCSA_ROOT does not exist"
  exit 1
fi

if [ ! -d "$OA4MP_ROOT" ]; then
  echo "Error: OA4MP root directory $OA4MP_ROOT does not exist"
  exit 1
fi

if [ ! -d "$CILOGON_ROOT" ]; then
  echo "Error: CILogon root directory $CILOGON_ROOT does not exist"
  exit 1
fi


# A target directory for wars, jars and everything that should get deployed someplace.

OA4MP_CLIENT_DEPLOY=$DEPLOY_ROOT/client
OA4MP_SERVER_DEPLOY=$DEPLOY_ROOT/server
CILOGON_DEPLOY=$DEPLOY_ROOT/cilogon
TWOFACTOR_DEPLOY=$DEPLOY_ROOT/twofactor


if [ ! -d "$DEPLOY_ROOT" ]; then
    mkdir "$DEPLOY_ROOT"

fi

if [ ! -d "$OA4MP_CLIENT_DEPLOY" ]; then
  mkdir "$OA4MP_CLIENT_DEPLOY"
fi

if [ ! -d "$OA4MP_SERVER_DEPLOY" ]; then
  mkdir "$OA4MP_SERVER_DEPLOY"
fi

if [ ! -d "$CILOGON_DEPLOY" ]; then
  mkdir "$CILOGON_DEPLOY"
fi

if [ ! -d "$TWOFACTOR_DEPLOY" ]; then
  mkdir "$TWOFACTOR_DEPLOY"
fi


# Where the command line tools for each component live.

CILOGON_TOOLS=$CILOGON_ROOT/cilogon2-admin
OA2_TOOLS=$OA4MP_ROOT/oa4mp-server-oauth2-admin
OA4MP_TOOLS=$OA4MP_ROOT/oa4mp-server-admin

cd $NCSA_ROOT
mvn clean $MAVEN_TARGET

if [[ $? -ne 0 ]] ; then
    echo "NCSA maven build failed, exiting..."
    exit 1
fi

cd $OA4MP_ROOT
mvn clean $MAVEN_TARGET

if [[ $? -ne 0 ]] ; then
    echo "OA4MP maven build failed, exiting..."
    exit 1
fi


# At this point we do not deploy CILogon to Sonatype, so no deploy target, just install.

cp $OA4MP_ROOT/oa4mp-client-oauth1/target/client.war $OA4MP_CLIENT_DEPLOY
cp $OA4MP_ROOT/oa4mp-client-oauth1/src/main/resources/*.sql $OA4MP_CLIENT_DEPLOY

cp $OA4MP_ROOT/oa4mp-client-oauth2/target/client2.war $OA4MP_CLIENT_DEPLOY
cp $OA4MP_ROOT/oa4mp-client-oauth2/src/main/resources/*.sql $OA4MP_CLIENT_DEPLOY

cp $OA4MP_ROOT/oa4mp-server-oauth1/target/oauth.war $OA4MP_SERVER_DEPLOY
cp $OA4MP_ROOT/oa4mp-server-oauth1/target/oauth.war $OA4MP_SERVER_DEPLOY

cp $OA4MP_ROOT/oa4mp-server-oauth2/target/oauth2.war  $OA4MP_SERVER_DEPLOY

if [ $RELEASE == 1 ] || [ $RELEASE == 2 ] ; then
   cp $OA4MP_ROOT/oa4mp-client-oauth1/target/client.war.asc $OA4MP_CLIENT_DEPLOY
   cp $OA4MP_ROOT/oa4mp-client-oauth2/target/client2.war.asc $OA4MP_CLIENT_DEPLOY
   cp $OA4MP_ROOT/oa4mp-server-oauth1/target/oauth.war.asc $OA4MP_SERVER_DEPLOY
   cp $OA4MP_ROOT/oa4mp-server-oauth2/target/oauth2.war.asc  $OA4MP_SERVER_DEPLOY
fi

cd $OA4MP_TOOLS
mvn -P cli clean install
mvn -P copy install
mvn -P verifier install
mvn -P monitor install
cd $OA4MP_TOOLS/target
cp *.jar $OA4MP_SERVER_DEPLOY
cd $OA4MP_TOOLS/src/main/resources
cp *.sql $OA4MP_SERVER_DEPLOY
cd $OA4MP_TOOLS/src/main/scripts
cp * $OA4MP_SERVER_DEPLOY

cp $OA4MP_ROOT/oa4mp-xsede/target/oauth.war $OA4MP_SERVER_DEPLOY/xsede-oauth.war


cd $OA2_TOOLS
mvn -P cli clean install
mvn -P copy install
mvn -P verifier install
mvn -P monitor install
cd $OA2_TOOLS/target
cp *.jar $OA4MP_SERVER_DEPLOY
cd $OA2_TOOLS/src/main/resources
cp *.sql $OA4MP_SERVER_DEPLOY
cd $OA2_TOOLS/src/main/scripts
cp * $OA4MP_SERVER_DEPLOY


# Finally, remove any *-admin-*.jar files since these are included in all of the other jars and are redundant
cd $OA4MP_SERVER_DEPLOY
rm *-admin-*.jar


cd $CILOGON_ROOT
mvn clean install

if [[ $? -ne 0 ]] ; then
    echo "CILogon maven build failed, exiting..."
    exit 1
fi


cd $CILOGON_TOOLS
mvn -P cli clean install
mvn -P copy install
mvn -P verifier install
mvn -P monitor install
cp $CILOGON_ROOT/cilogon2-server-webapp/target/oauth.war $CILOGON_DEPLOY/
cp $CILOGON_ROOT/cilogon2-client/target/cilogon2-client.war $CILOGON_DEPLOY/

cp $CILOGON_TOOLS/src/main/scripts/* $CILOGON_DEPLOY
cp $CILOGON_TOOLS/src/main/resources/*.sql $CILOGON_DEPLOY


cd $CILOGON_TOOLS/target
cp *.jar $CILOGON_DEPLOY/

# Again, remove jars like cilogon2-admin.jar which is redundant.
cd $CILOGON_DEPLOY
rm *-admin-*.jar

# Make the twofactor server for NCSA and the utilities


cd $TWOFACTOR_ROOT/target
cp twofactor.war $TWOFACTOR_DEPLOY

# Twofactor really is just a renaming of the OA4MP server. Here is a client so people have one.
cp $OA4MP_ROOT/oa4mp-client-oauth1/target/client.war $TWOFACTOR_DEPLOY/twofactor-client.war

# Now make the tools.
cd $OA4MP_TOOLS/target
cp *.jar $TWOFACTOR_DEPLOY
cd $OA4MP_TOOLS/src/main/resources
cp *.sql $TWOFACTOR_DEPLOY
cd $OA4MP_TOOLS/src/main/scripts
cp * $TWOFACTOR_DEPLOY

# Now for the fun. We have to change names of certain files and edit their content.
cd $TWOFACTOR_DEPLOY
mv oa4mp-cli.jar twofactor-cli.jar
mv oa4mp-cp.jar twofactor-cp.jar
mv oa4mp-cp-verifier.jar twofactor-cp-verifier.jar
mv oa4mp-monitor.jar twofactor-monitor.jar

mv oa4mp-cli twofactor-cli
mv oa4mp-cp twofactor-cp
mv oa4mp-cp-verifier twofactor-cp-verifier
mv oa4mp-monitor twofactor-monitor

sed -i s/oa4mp/twofactor/g twofactor-cli
sed -i s/oa4mp/twofactor/g twofactor-cp
sed -i s/oa4mp/twofactor/g twofactor-cp-verifier
sed -i s/oa4mp/twofactor/g twofactor-monitor

chmod u+x twofactor-cli
chmod u+x twofactor-cp
chmod u+x twofactor-cp-verifier
chmod u+x twofactor-monitor



echo "............done!"
echo "OA4MP client target:" $OA4MP_CLIENT_DEPLOY
echo "OA4MP server target:" $OA4MP_SERVER_DEPLOY
echo "CILOGON   target:" $CILOGON_DEPLOY
echo "2FAC  target:" $TWOFACTOR_DEPLOY

